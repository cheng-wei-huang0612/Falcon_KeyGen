import sys

def signed_repr(val, mod):
    # Convert val mod mod into range [-mod/2, mod/2)
    val = val % mod
    if val > mod // 2:
        val -= mod
    return val

def crt(moduli, residues):
    # A simple implementation of CRT for pairwise coprime moduli
    # Assumes moduli are pairwise coprime
    from functools import reduce
    M = 1
    for m in moduli:
        M *= m
    x = 0
    for m, r in zip(moduli, residues):
        M_i = M // m
        # Compute inverse of M_i mod m
        inv = pow(M_i, -1, m)  # Python 3.8+ syntax
        x += r * M_i * inv
    return signed_repr(x, M)


# Define n, m, and p as in data.h
n = 216
m = 304
p = [
   1073707009,1073698817,1073692673,1073682433,1073668097,1073655809,1073651713,1073643521,1073620993,1073600513,1073569793,1073563649,1073551361,1073539073,1073522689,1073510401,1073508353,1073479681,1073453057,1073442817,1073440769,1073430529,1073412097,1073391617,1073385473,1073354753,1073350657,1073330177,1073299457,1073268737,1073264641,1073233921,1073213441,1073184769,1073166337,1073135617,1073080321,1073072129,1073053697,1073029121,1073010689,1072961537,1072920577,1072900097,1072896001,1072857089,1072828417,1072826369,1072797697,1072766977,1072764929,1072746497,1072740353,1072721921,1072711681,1072705537,1072611329,1072588801,1072539649,1072537601,1072531457,1072521217,1072496641,1072488449,1072459777,1072355329,1072322561,1072306177,1072293889,1072291841,1072254977,1072218113,1072187393,1072177153,1072158721,1072115713,1072109569,1072097281,1072078849,1072060417,1072039937,1071947777,1071882241,1071861761,1071843329,1071751169,1071738881,1071695873,1071679489,1071630337,1071628289,1071624193,1071616001,1071593473,1071562753,1071556609,1071544321,1071542273,1071513601,1071495169,1071476737,1071456257,1071450113,1071446017,1071415297,1071403009,1071384577,1071364097,1071308801,1071290369,1071259649,1071255553,1071241217,1071230977,1071228929,1071175681,1071173633,1071157249,1071144961,1071114241,1071108097,1071093761,1071087617,1071071233,1071056897,1071040513,1071003649,1070983169,1070964737,1070960641,1070942209,1070940161,1070927873,1070911489,1070872577,1070862337,1070848001,1070835713,1070831617,1070817281,1070776321,1070764033,1070757889,1070739457,1070727169,1070725121,1070702593,1070696449,1070632961,1070614529,1070571521,1070555137,1070548993,1070542849,1070524417,1070512129,1070499841,1070487553,1070442497,1070432257,1070430209,1070419969,1070411777,1070309377,1070303233,1070288897,1070241793,1070196737,1070172161,1070166017,1070161921,1070155777,1070125057,1070123009,1070098433,1070088193,1070069761,1070043137,1070008321,1070002177,1069971457,1069959169,1069957121,1069944833,1069928449,1069883393,1069836289,1069821953,1069780993,1069772801,1069754369,1069750273,1069735937,1069713409,1069670401,1069664257,1069651969,1069643777,1069637633,1069600769,1069596673,1069578241,1069559809,1069557761,1069510657,1069473793,1069424641,1069398017,1069373441,1069355009,1069314049,1069283329,1069271041,1069264897,1069240321,1069221889,1069219841,1069213697,1069209601,1069182977,1069176833,1069172737,1069170689,1069129729,1069127681,1069084673,1069068289,1068998657,1068943361,1068937217,1068906497,1068875777,1068822529,1068810241,1068808193,1068791809,1068742657,1068711937,1068699649,1068675073,1068666881,1068654593,1068636161,1068607489,1068595201,1068589057,1068574721,1068564481,1068521473,1068466177,1068460033,1068433409,1068374017,1068347393,1068322817,1068312577,1068306433,1068292097,1068281857,1068255233,1068238849,1068236801,1068224513,1068218369,1068208129,1068206081,1068195841,1068189697,1068187649,1068095489,1068083201,1068060673,1068015617,1068009473,1068005377,1067968513,1067931649,1067923457,1067888641,1067876353,1067868161,1067862017,1067808769,1067739137,1067732993,1067665409,1067653121,1067630593,1067624449,1067593729,1067585537,1067573249,1067550721,1067548673,1067542529,1067524097,1067520001,1067501569,1067493377,1067487233,1067438081,1067401217,1067395073,1067335681
]

# Paste the output from the C program here as a multiline string
input_data = """
Partial: -253104882 134883160 -410431233 95079873 279592143 410927765 155537603 -440748299 -490128430 275573626 289925500 137483457 -7561448 -343071396 -379726474 408987470 162937050 -260839513 -63264281 237045050 433990165 144807414 -257394594 -97788438 -148400865 -491168730 -208357828 -528989894 -28849257 -530087915 287091957 -240217705 37522966 362596222 -101474629 -397911860 -415823404 -137536760 223288046 75228692 408000460 -127010561 -524857763 -182593402 -279737786 -150829565 274599116 244985209 -332541333 43175700 -471646770 -155462181 12397199 53809834 291264651 97052307 -90443188 -78563918 228378919 -65175332 -20997132 480412776 -352134922 154917014 275703559 -517221124 -354936462 62665458 446222902 -56246452 -112134328 262257000 44767963 441932712 -33549690 319127358 -251763808 -365905894 -180149711 111099472 13496724 -402815392 -349773529 -20828374 -478547924 -16204057 46969864 224309926 42832272 474973759 -384376675 399198739 436757507 484314703 -157371562 -429776719 438316070 -162262993 -308286693 -436675944 -363520458 490320516 89606530 -440532854 -512065292 -56678318 -412536176 -121766878 -213138726 -394181506 255890674 -492190187 44900981 -187203407 488270115 462520873 -297353248 226924244 -501861983 -171750380 -523711953 25421938 -77425374 -8426086 331920280 466969779 384825866 -296498004 -390988820 523790691 242238717 -317274768 79066918 -409025998 22233316 108143566 -273099601 -53885134 66034780 -396648954 -205122418 468104483 128688931 -397030106 428548104 -247567182 489973586 463060855 -528472535 -390751654 -298804957 -384138125 460213000 -407817558 503248078 -155297245 70549464 313868304 -105694201 -47356235 -56236546 77715899 501057117 -86723845 -200201101 -363982684 -394078664 21036858 308982137 -485047619 -278324175 426543408 477119927 -403158444 -183906604 325709671 63340420 487990538 533859533 -77717143 -15895431 175423531 -368499004 -529782961 -447973361 326370674 218457011 345542093 347163303 60564622 2353276 -172946187 476302819 -270699779 -322663303 -310768533 -214598234 -64245486 97609596 -144744227 -297816719 504458998 176941030 -408591760 472325956 -28677597 -523574364 515367082 -83918083 -315612632 501091106 485555326 522986848 215350259 -264657041 505578752
Full: -253104882 134883160 -410431233 95079873 279592143 410927765 155537603 -440748299 -490128430 275573626 289925500 137483457 -7561448 -343071396 -379726474 408987470 162937050 -260839513 -63264281 237045050 433990165 144807414 -257394594 -97788438 -148400865 -491168730 -208357828 -528989894 -28849257 -530087915 287091957 -240217705 37522966 362596222 -101474629 -397911860 -415823404 -137536760 223288046 75228692 408000460 -127010561 -524857763 -182593402 -279737786 -150829565 274599116 244985209 -332541333 43175700 -471646770 -155462181 12397199 53809834 291264651 97052307 -90443188 -78563918 228378919 -65175332 -20997132 480412776 -352134922 154917014 275703559 -517221124 -354936462 62665458 446222902 -56246452 -112134328 262257000 44767963 441932712 -33549690 319127358 -251763808 -365905894 -180149711 111099472 13496724 -402815392 -349773529 -20828374 -478547924 -16204057 46969864 224309926 42832272 474973759 -384376675 399198739 436757507 484314703 -157371562 -429776719 438316070 -162262993 -308286693 -436675944 -363520458 490320516 89606530 -440532854 -512065292 -56678318 -412536176 -121766878 -213138726 -394181506 255890674 -492190187 44900981 -187203407 488270115 462520873 -297353248 226924244 -501861983 -171750380 -523711953 25421938 -77425374 -8426086 331920280 466969779 384825866 -296498004 -390988820 523790691 242238717 -317274768 79066918 -409025998 22233316 108143566 -273099601 -53885134 66034780 -396648954 -205122418 468104483 128688931 -397030106 428548104 -247567182 489973586 463060855 -528472535 -390751654 -298804957 -384138125 460213000 -407817558 503248078 -155297245 70549464 313868304 -105694201 -47356235 -56236546 77715899 501057117 -86723845 -200201101 -363982684 -394078664 21036858 308982137 -485047619 -278324175 426543408 477119927 -403158444 -183906604 325709671 63340420 487990538 533859533 -77717143 -15895431 175423531 -368499004 -529782961 -447973361 326370674 218457011 345542093 347163303 60564622 2353276 -172946187 476302819 -270699779 -322663303 -310768533 -214598234 -64245486 97609596 -144744227 -297816719 504458998 176941030 -408591760 472325956 -28677597 -523574364 515367082 -83918083 -315612632 501091106 485555326 522986848 215350259 -264657041 505578752 -368360306 -83524912 -70255647 -532459717 -148084617 28221875 -247813946 -302456046 -380610265 406996756 -25143130 409396348 -320545068 340408917 -361072197 -516889899 -332261293 419106676 359890920 -164653737 165722413 -88024457 -131243314 -35170928 -145983911 51523560 -482690974 280331878 155352843 133800731 487320690 74400585 -523343927 198975317 213982727 73098904 110687334 208927350 -495032753 -261940094 122691316 -451978154 114862607 417770405 -117956950 -113244569 -5954734 133125063 -152318654 400411218 449408214 -252414794 -213494550 -493252977 164490635 -401334039 375974465 -141271270 462074148 -37296375 -329074588 -280994222 -261541279 -129878640 32343879 -419961267 -151177174 -167793737 403734880 -44189020 399974970 -78689417 342072312 -83421808 24649745 -316586642 531644334 184580796 -34599030 -306336032 113153625 -159134984 350049617 387242346 -295536077 -356046705 -487265458 -246703685
""".strip()

# Parse the input_data
partial_line = None
full_line = None
for line in input_data.splitlines():
    line = line.strip()
    if line.startswith("Partial:"):
        partial_line = line
    elif line.startswith("Full:"):
        full_line = line

if partial_line is None or full_line is None:
    print("Error: Could not find partial or full lines in input_data")
    sys.exit(1)

# Parse arrays
partial_vals = partial_line.split()[1:] # skip the word "Partial:"
full_vals = full_line.split()[1:]       # skip the word "Full:"

if len(partial_vals) != n:
    print("Error: partial array length mismatch")
    sys.exit(1)

if len(full_vals) != m:
    print("Error: full array length mismatch")
    sys.exit(1)

partial = list(map(int, partial_vals))
full_rep = list(map(int, full_vals))

# Adjust partial residues to [0, p[i]-1] for CRT
residues_n_nonneg = []
for i in range(n):
    val = partial[i]
    if val < 0:
        val += p[i]
    residues_n_nonneg.append(val)

# Compute u mod P using CRT from the partial residues
u_mod_P = crt(p[:n], residues_n_nonneg)
u_mod_P_int = int(u_mod_P)

# Verify full representation
for j in range(m):
    pj = p[j]
    val = u_mod_P_int % pj
    if val > pj//2:
        val -= pj
    if val != full_rep[j]:
        print(f"Mismatch at modulus p[{j}]={pj}: expected {val}, got {full_rep[j]}")
        sys.exit(1)

print("Verification passed: full representation matches computed u.")
