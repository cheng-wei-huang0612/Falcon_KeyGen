from math import gcd
import sys

# Given prime moduli (paste the given list here):
p = [
    1073707009,1073698817,1073692673,1073682433,1073668097,1073655809,1073651713,1073643521,1073620993,1073600513,
    1073569793,1073563649,1073551361,1073539073,1073522689,1073510401,1073508353,1073479681,1073453057,1073442817,
    1073440769,1073430529,1073412097,1073391617,1073385473,1073354753,1073350657,1073330177,1073299457,1073268737,
    1073264641,1073233921,1073213441,1073184769,1073166337,1073135617,1073080321,1073072129,1073053697,1073029121,
    1073010689,1072961537,1072920577,1072900097,1072896001,1072857089,1072828417,1072826369,1072797697,1072766977,
    
    1072764929,1072746497,1072740353,1072721921,1072711681,1072705537,1072611329,1072588801,1072539649,1072537601,
    1072531457,1072521217,1072496641,1072488449,1072459777,1072355329,1072322561,1072306177,1072293889,1072291841,
    1072254977,1072218113,1072187393,1072177153,1072158721,1072115713,1072109569,1072097281,1072078849,1072060417,
    1072039937,1071947777,1071882241,1071861761,1071843329,1071751169,1071738881,1071695873,1071679489,1071630337,
    1071628289,1071624193,1071616001,1071593473,1071562753,1071556609,1071544321,1071542273,1071513601,1071495169,
    
    1071476737,1071456257,1071450113,1071446017,1071415297,1071403009,1071384577,1071364097,1071308801,1071290369,
    1071259649,1071255553,1071241217,1071230977,1071228929,1071175681,1071173633,1071157249,1071144961,1071114241,
    1071108097,1071093761,1071087617,1071071233,1071056897,1071040513,1071003649,1070983169,1070964737,1070960641,
    1070942209,1070940161,1070927873,1070911489,1070872577,1070862337,1070848001,1070835713,1070831617,1070817281,
    1070776321,1070764033,1070757889,1070739457,1070727169,1070725121,1070702593,1070696449,1070632961,1070614529,
    
    1070571521,1070555137,1070548993,1070542849,1070524417,1070512129,1070499841,1070487553,1070442497,1070432257,
    1070430209,1070419969,1070411777,1070309377,1070303233,1070288897,1070241793,1070196737,1070172161,1070166017,
    1070161921,1070155777,1070125057,1070123009,1070098433,1070088193,1070069761,1070043137,1070008321,1070002177,
    1069971457,1069959169,1069957121,1069944833,1069928449,1069883393,1069836289,1069821953,1069780993,1069772801,
    1069754369,1069750273,1069735937,1069713409,1069670401,1069664257,1069651969,1069643777,1069637633,1069600769,
    
    1069596673,1069578241,1069559809,1069557761,1069510657,1069473793,1069424641,1069398017,1069373441,1069355009,
    1069314049,1069283329,1069271041,1069264897,1069240321,
    
    1069221889,1069219841,1069213697,1069209601,1069182977,
    1069176833,1069172737,1069170689,1069129729,1069127681,1069084673,1069068289,1068998657,1068943361,1068937217,
    1068906497,1068875777,1068822529,1068810241,1068808193,1068791809,1068742657,1068711937,1068699649,1068675073,
    1068666881,1068654593,1068636161,1068607489,1068595201,1068589057,1068574721,1068564481,1068521473,1068466177,
    1068460033,1068433409,1068374017,1068347393,1068322817,1068312577,1068306433,1068292097,1068281857,1068255233,
    1068238849,1068236801,1068224513,1068218369,1068208129,1068206081,1068195841,1068189697,1068187649,1068095489,
    1068083201,1068060673,1068015617,1068009473,1068005377,1067968513,1067931649,1067923457,1067888641,1067876353,
    1067868161,1067862017,1067808769,1067739137,1067732993,1067665409,1067653121,1067630593,1067624449,1067593729,
    1067585537,1067573249,1067550721,1067548673,1067542529,1067524097,1067520001,1067501569,1067493377,1067487233,
    1067438081,1067401217,1067395073,1067335681
]

n = 216
m = 304

if len(p) < m:
    sys.exit("Not enough primes provided.")

# Extract p_1 ... p_n and the full set p_1 ... p_m
p_n = p[:n]
p_m = p[:m]

def extended_gcd(a, b):
    if b == 0:
        return (a, 1, 0)
    g, x1, y1 = extended_gcd(b, a % b)
    return (g, y1, x1 - (a // b) * y1)

def mod_inverse(a, m):
    g, x, _ = extended_gcd(a, m)
    if g != 1:
        raise ValueError("No modular inverse")
    return x % m

# Compute P = p_1 * p_2 * ... * p_n in Python integer (arbitrary precision)
P = 1
for i in range(n):
    P *= p_n[i]

# Compute P_i and q_i
P_i_list = [P // p_n[i] for i in range(n)]
q_list = [mod_inverse(P_i_list[i] % p_n[i], p_n[i]) for i in range(n)]

# Precompute P_mod[j] = P mod p[j]
P_mod = [P % pj for pj in p_m]

# Precompute P_i_mod[i][j] = (P_i mod p[j])
P_i_mod = []
for i in range(n):
    row = [(P_i_list[i] % p_m[j]) for j in range(m)]
    P_i_mod.append(row)

with open("data.h", "w") as fh:
    fh.write("#ifndef DATA_H\n")
    fh.write("#define DATA_H\n\n")
    fh.write("#include <stdint.h>\n\n")

    fh.write("extern const int n;\n")
    fh.write("extern const int m;\n")
    fh.write("extern const uint32_t p[];\n")
    fh.write("extern const uint32_t P_mod[];\n")
    fh.write("extern const uint32_t q[];\n")
    fh.write("extern const uint32_t P_i_mod[];\n")

    fh.write("#endif // DATA_H\n")

with open("data.c", "w") as fc:
    fc.write("#include \"data.h\"\n\n")
    fc.write("const int n = %d;\n" % n)
    fc.write("const int m = %d;\n" % m)

    # p array
    fc.write("const uint32_t p[] = {")
    fc.write(",".join(str(x) for x in p_m))
    fc.write("};\n")

    # P_mod
    fc.write("const uint32_t P_mod[] = {")
    fc.write(",".join(str(x) for x in P_mod))
    fc.write("};\n")

    # q array
    fc.write("const uint32_t q[] = {")
    fc.write(",".join(str(q_list[i]) for i in range(n)))
    fc.write("};\n")

    # P_i_mod flattened
    fc.write("const uint32_t P_i_mod[] = {")
    for i in range(n):
        fc.write(",".join(str(x) for x in P_i_mod[i]))
        if i < n-1:
            fc.write(",")
    fc.write("};\n")
